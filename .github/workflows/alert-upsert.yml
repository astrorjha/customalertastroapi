name: Rewire DAG failure alert to last committer

# ─── Triggers ────────────────────────────────────────────────────────────────
on:
  push:
    branches:
      - main
  workflow_dispatch:

# ─── Secrets & Env Vars (set these in your repo’s Settings → Secrets) ──────────
env:
  # Astronomer Platform credentials
  ASTRO_ORG_ID:    ${{ secrets.ASTRO_ORG_ID }}
  ASTRO_DEPLOY_ID: ${{ secrets.ASTRO_DEPLOY_ID }}
  ASTRO_API_TOKEN: ${{ secrets.ASTRO_API_TOKEN }}
  # GitHub PAT with user:email scope, for GraphQL email lookup
  GH_EMAIL_TOKEN:  ${{ secrets.GH_EMAIL_TOKEN }}
  # Built-in GitHub Actions token
  GH_TOKEN:        ${{ secrets.GITHUB_TOKEN }}

jobs:
  upsert-alert:
    name: Upsert Astro DAG_FAILURE Alert
    runs-on: ubuntu-latest

    steps:
      # ─────────────────────────────────────────────────────────────────────────
      # 1️⃣ Checkout repository (so we have GITHUB_SHA & GITHUB_REPOSITORY)
      - name: 🚀 Checkout repository
        uses: actions/checkout@v4

      # ─────────────────────────────────────────────────────────────────────────
      # 2️⃣ Determine the “true” committer email
      #   • Fast path: commit.author.email via GH CLI (public commits)
      #   • Fallback: GraphQL viewer { email } via GH_EMAIL_TOKEN
      #   • Last-ditch: GITHUB_ACTOR@users.noreply.github.com
      - name: 🔍 Determine committer email
        id: lookup-email
        run: |
          set -euxo pipefail

          echo "▶ GITHUB_ACTOR = $GITHUB_ACTOR"

          # 2a) Try commit-author.email first
          COMMIT_EMAIL=$(gh api \
            /repos/${GITHUB_REPOSITORY}/commits/${GITHUB_SHA} \
            -q .commit.author.email \
            || echo "")
          if [[ -n "$COMMIT_EMAIL" && "$COMMIT_EMAIL" != "null" ]]; then
            echo "▶ Using commit-author email: $COMMIT_EMAIL"
            echo "AUTHOR_EMAIL=$COMMIT_EMAIL" >> "$GITHUB_ENV"
            exit 0
          fi

          # 2b) Fallback: fetch primary email via GraphQL
          REAL_EMAIL=$(curl -s -X POST \
            -H "Authorization: Bearer $GH_EMAIL_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"query":"query { viewer { email } }"}' \
            https://api.github.com/graphql \
            | jq -r .data.viewer.email)
          if [[ -n "$REAL_EMAIL" && "$REAL_EMAIL" != "null" ]]; then
            echo "▶ Fetched GitHub-profile email: $REAL_EMAIL"
            echo "AUTHOR_EMAIL=$REAL_EMAIL" >> "$GITHUB_ENV"
            exit 0
          fi

          # 2c) Last-ditch: GitHub no-reply
          FALLBACK="${GITHUB_ACTOR}@users.noreply.github.com"
          echo "▶ Falling back to: $FALLBACK"
          echo "AUTHOR_EMAIL=$FALLBACK" >> "$GITHUB_ENV"

      # ─────────────────────────────────────────────────────────────────────────
      # 3️⃣ Create or reuse an Astro Notification Channel scoped to deployment+email
      - name: 🔔 Upsert Notification Channel
        id: upsert-channel
        run: |
          set -euxo pipefail

          # Fetch existing channels on this deployment only
          ALL_CH=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/notification-channels?entityType=DEPLOYMENT&entityId=$ASTRO_DEPLOY_ID&limit=100")

          # Pick first matching channel ID (stripped of newlines)
          CHANNEL_ID=$(echo "$ALL_CH" \
            | jq -r --arg email "$AUTHOR_EMAIL" \
              '.notificationChannels[] | select(.definition.recipients[]? == $email) | .id' \
            | head -n1)

          if [[ -z "$CHANNEL_ID" ]]; then
            echo "▶ Creating new email channel for $AUTHOR_EMAIL"
            CREATE_RESP=$(curl -s -X POST -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{"name":"dag-failure-'${AUTHOR_EMAIL}'","type":"EMAIL","entityType":"DEPLOYMENT","entityId":"'${ASTRO_DEPLOY_ID}'","definition":{"recipients":["'${AUTHOR_EMAIL}'"]}}' \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/notification-channels")
            CHANNEL_ID=$(echo "$CREATE_RESP" | jq -r .id)
          else
            echo "▶ Reusing existing channel: $CHANNEL_ID"
          fi

          # Export for next step
          echo "CHANNEL_ID=$CHANNEL_ID" >> "$GITHUB_ENV"

      # ─────────────────────────────────────────────────────────────────────────
      # 4️⃣ Create or update the DAG_FAILURE alert for your specific DAG
      - name: 🚨 Upsert DAG_FAILURE Alert
        run: |
          set -euxo pipefail

          # Define your DAG ID here
          dag_id="fail_demo_dag"

          # Fetch existing alerts on this deployment only
          ALL_ALERTS=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/alerts?entityType=DEPLOYMENT&entityId=$ASTRO_DEPLOY_ID&limit=100")

          # Check for an existing DAG_FAILURE alert
          ALERT_ID=$(echo "$ALL_ALERTS" | jq -r \
            '.alerts[] | select(.type=="DAG_FAILURE" and .entityId=="'