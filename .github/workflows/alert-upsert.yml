# .github/workflows/alert-upsert.yml
# Custom Alert Workflow: upserts an Astro DAG_FAILURE alert targeting
# the true committer‚Äôs email via a 4-step lookup (commit API ‚Üí push event ‚Üí GraphQL ‚Üí no-reply).

name: Rewire DAG failure alert to last committer

on:
  push:
    branches: [main]
  workflow_dispatch:

# ‚îÄ‚îÄ‚îÄ Global Env & Secrets (set these in Settings ‚Üí Secrets) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
env:
  ASTRO_ORG_ID: ${{ secrets.ASTRO_ORG_ID }} # Your Astro Org ID
  ASTRO_DEPLOY_ID: ${{ secrets.ASTRO_DEPLOY_ID }} # Your Astro Deployment ID
  ASTRO_API_TOKEN: ${{ secrets.ASTRO_API_TOKEN }} # Token with Platform API perms
  GH_EMAIL_TOKEN: ${{ secrets.GH_EMAIL_TOKEN }} # GitHub token for GraphQL fallback

jobs:
  upsert-alert:
    name: Upsert Astro DAG_FAILURE Alert
    runs-on: ubuntu-latest

    # Bring in the push‚Äêevent email for quick lookup
    env:
      PUSHER_EMAIL: ${{ github.event.pusher.email }}

    steps:
      # 1Ô∏è‚É£ Checkout so we have $GITHUB_SHA, $GITHUB_ACTOR, etc.
      - name: üöÄ Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Determine the ‚Äútrue‚Äù committer email
      - name: üîç Determine committer email
        id: lookup-email
        run: |
          set -euxo pipefail
          echo "‚ñ∂ GITHUB_ACTOR = $GITHUB_ACTOR"
          # 2a) Try commit‚Äôs author.email via REST API
          COMMIT_EMAIL=$(gh api \
            /repos/${GITHUB_REPOSITORY}/commits/${GITHUB_SHA} \
            -q .commit.author.email || echo "")
          if [[ -n "$COMMIT_EMAIL" && "$COMMIT_EMAIL" != "null" ]]; then
            echo "‚ñ∂ Using commit-author email: $COMMIT_EMAIL"
            AUTHOR_EMAIL="$COMMIT_EMAIL"
          else
            # 2b) Next, try the push-event pusher.email
            if [[ -n "$PUSHER_EMAIL" && "$PUSHER_EMAIL" != "null" ]]; then
              echo "‚ñ∂ Using push-event pusher.email: $PUSHER_EMAIL"
              AUTHOR_EMAIL="$PUSHER_EMAIL"
            else
              # 2c) Fallback: public profile via GraphQL
              USER_EMAIL=$(curl -s -X POST \
                -H "Authorization: Bearer $GH_EMAIL_TOKEN" \
                -H "Content-Type: application/json" \
                -d '{"query":"query { viewer { email } }"}' \
                https://api.github.com/graphql \
                | jq -r .data.viewer.email || echo "")
              if [[ -n "$USER_EMAIL" && "$USER_EMAIL" != "null" ]]; then
                echo "‚ñ∂ Using GraphQL viewer.email: $USER_EMAIL"
                AUTHOR_EMAIL="$USER_EMAIL"
              else
                # 2d) Final fallback: GitHub no-reply
                AUTHOR_EMAIL="${GITHUB_ACTOR}@users.noreply.github.com"
                echo "‚ñ∂ Falling back to no-reply: $AUTHOR_EMAIL"
              fi
            fi
          fi
          # Export for downstream steps
          echo "AUTHOR_EMAIL=$AUTHOR_EMAIL" >> "$GITHUB_ENV"

      # 3Ô∏è‚É£ Create or reuse exactly one Notification Channel for this email
      - name: üîî Upsert Notification Channel
        id: upsert-channel
        run: |
          set -euxo pipefail
          echo "‚ñ∂ ORG_ID       = $ASTRO_ORG_ID"
          echo "‚ñ∂ DEPLOY_ID    = $ASTRO_DEPLOY_ID"
          echo "‚ñ∂ AUTHOR_EMAIL = $AUTHOR_EMAIL"

          # Fetch channels scoped to this deployment
          ALL_CH=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/notification-channels?entityType=DEPLOYMENT&entityId=$ASTRO_DEPLOY_ID&limit=100")

          # Select channels you created (SERVICEKEY) for this email
          CHANNEL_ID=$(echo "$ALL_CH" | jq -r --arg email "$AUTHOR_EMAIL" '
            .notificationChannels[]
            | select(
                .definition.recipients[] == $email
                and .createdBy.subjectType=="SERVICEKEY"
              )
            | .id
          ' | head -n1)

          if [[ -z "$CHANNEL_ID" ]]; then
            echo "‚ñ∂ Creating new email channel for $AUTHOR_EMAIL"
            CHANNEL_ID=$(curl -s -X POST \
              -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                    "name":           "dag-failure-'${AUTHOR_EMAIL}'",
                    "type":           "EMAIL",
                    "entityType":     "DEPLOYMENT",
                    "entityId":       "'${ASTRO_DEPLOY_ID}'",
                    "definition":     { "recipients": ["'${AUTHOR_EMAIL}'"] }
                  }' \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/notification-channels" \
            | jq -r .id)
            echo "‚ñ∂ Created channel: $CHANNEL_ID"
          else
            echo "‚ñ∂ Reusing existing channel: $CHANNEL_ID"
          fi

          echo "CHANNEL_ID=$CHANNEL_ID" >> "$GITHUB_ENV"

      # 4Ô∏è‚É£ Create or update the DAG_FAILURE Alert
      - name: üö® Upsert DAG_FAILURE Alert
        run: |
          set -euxo pipefail
          echo "‚ñ∂ CHANNEL_ID = $CHANNEL_ID"

          # Replace with your actual DAG ID
          dag_id="fail_demo_dag"

          # Fetch existing alerts on this deployment
          ALL_ALERTS=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/alerts?entityType=DEPLOYMENT&entityId=$ASTRO_DEPLOY_ID&limit=100")

          # Locate any existing DAG_FAILURE alert
          ALERT_ID=$(echo "$ALL_ALERTS" | jq -r '
            .alerts[]
            | select(.type=="DAG_FAILURE" and .entityId=="'"$ASTRO_DEPLOY_ID"'")
            | .id // empty
          ')

          # Build JSON payload with jq to avoid quoting issues
          PAYLOAD=$(jq -n \
            --arg entType "DEPLOYMENT" \
            --arg entId  "$ASTRO_DEPLOY_ID" \
            --arg name   "auto-committer-dag-failure" \
            --arg dtype  "DAG_FAILURE" \
            --arg sev    "CRITICAL" \
            --arg chId   "$CHANNEL_ID" \
            --arg dagid  "$dag_id" \
            '{
              entityType:            $entType,
              entityId:              $entId,
              name:                  $name,
              type:                  $dtype,
              severity:              $sev,
              notificationChannelIds:[ $chId ],
              rules: {
                properties: { deploymentId: $entId },
                patternMatches: [
                  {
                    entityType:   "DAG_ID",
                    operatorType: "IS",
                    values:       [ $dagid ]
                  }
                ]
              }
            }')

          if [[ -z "$ALERT_ID" ]]; then
            echo "‚ñ∂ Creating new DAG_FAILURE alert for $dag_id"
            echo "$PAYLOAD" | curl -s -X POST \
              -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d @- \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/alerts" \
            | jq .
          else
            echo "‚ñ∂ Updating existing alert ($ALERT_ID) for $dag_id"
            echo "$PAYLOAD" | curl -s -X PATCH \
              -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d @- \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/alerts/$ALERT_ID" \
            | jq .
          fi
