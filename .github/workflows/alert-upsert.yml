# .github/workflows/alert-upsert.yml
# =================================
# Automatically rewire DAG_FAILURE alerts to the last committer's email

name: Rewire DAG failure alert to last committer

# Trigger on pushes to main or manual dispatch
on:
  push:
    branches:
      - main
  workflow_dispatch:

# Top‚Äêlevel environment variables (set these in Settings ‚Üí Secrets)
env:
  ASTRO_ORG_ID:    ${{ secrets.ASTRO_ORG_ID }}        # Your Astronomer Organization ID
  ASTRO_DEPLOY_ID: ${{ secrets.ASTRO_DEPLOY_ID }}     # Your Astronomer Deployment ID
  ASTRO_API_TOKEN: ${{ secrets.ASTRO_API_TOKEN }}     # API token with Platform permissions

jobs:
  upsert-alert:
    name: Upsert Astro DAG_FAILURE Alert
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        # Provided automatically
      DAG_ID: "fail_demo_dag"                         # <‚Äì‚Äì Replace with your DAG ID

    steps:
      # 1) Checkout the repo to get access to $GITHUB_SHA, etc.
      - name: üöÄ Checkout repository
        uses: actions/checkout@v4

      # 2) (Optional) Install CLI dependencies
      - name: üõ† Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      # 3) Determine the true committer email
      - name: üîç Determine committer email
        id: lookup-email
        run: |
          set -euxo pipefail
          echo "‚ñ∂ GITHUB_ACTOR = $GITHUB_ACTOR"

          # 3a) Try the commit.author.email (from the commit metadata)
          COMMIT_EMAIL=$(gh api /repos/${GITHUB_REPOSITORY}/commits/${GITHUB_SHA} \
            -q .commit.author.email || echo "")
          if [[ -n "$COMMIT_EMAIL" && "$COMMIT_EMAIL" != "null" ]]; then
            echo "‚ñ∂ Using commit author email: $COMMIT_EMAIL"
            AUTHOR_EMAIL="$COMMIT_EMAIL"
          else
            # 3b) Fallback: the actor's public GitHub profile email
            USER_EMAIL=$(gh api /users/${GITHUB_ACTOR} -q .email || echo "")
            if [[ -n "$USER_EMAIL" && "$USER_EMAIL" != "null" ]]; then
              echo "‚ñ∂ Using public GitHub-user email: $USER_EMAIL"
              AUTHOR_EMAIL="$USER_EMAIL"
            else
              # 3c) Final fallback: GitHub no-reply address
              AUTHOR_EMAIL="${GITHUB_ACTOR}@users.noreply.github.com"
              echo "‚ñ∂ Falling back to noreply: $AUTHOR_EMAIL"
            fi
          fi

          # Export for downstream steps
          echo "AUTHOR_EMAIL=$AUTHOR_EMAIL" >> "$GITHUB_ENV"

      # 4) Create or reuse an Astro Notification Channel scoped to this deployment & email
      - name: üîî Upsert Notification Channel
        id: upsert-channel
        run: |
          set -euxo pipefail
          echo "‚ñ∂ ORG_ID       = $ASTRO_ORG_ID"
          echo "‚ñ∂ DEPLOY_ID    = $ASTRO_DEPLOY_ID"
          echo "‚ñ∂ AUTHOR_EMAIL = $AUTHOR_EMAIL"

          # Fetch only channels on this deployment
          ALL_CH=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/${ASTRO_ORG_ID}/notification-channels?entityType=DEPLOYMENT&entityId=${ASTRO_DEPLOY_ID}&limit=100")

          # Look for a channel already targeting this email
          CHANNEL_ID=$(echo "$ALL_CH" | jq -r --arg email "$AUTHOR_EMAIL" '
            .notificationChannels[]
            | select(.definition.recipients[]? == $email)
            | .id // empty
          ')

          if [[ -z "$CHANNEL_ID" ]]; then
            echo "‚ñ∂ Creating new email channel for $AUTHOR_EMAIL"
            CREATE_RESP=$(curl -s -X POST -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                    "name": "dag-failure-'${AUTHOR_EMAIL}'",
                    "type": "EMAIL",
                    "entityType": "DEPLOYMENT",
                    "entityId": "'${ASTRO_DEPLOY_ID}'",
                    "definition": { "recipients": ["'${AUTHOR_EMAIL}'"] }
                  }' \
              "https://api.astronomer.io/platform/v1beta1/organizations/${ASTRO_ORG_ID}/notification-channels")
            CHANNEL_ID=$(echo "$CREATE_RESP" | jq -r .id)
          else
            echo "‚ñ∂ Reusing existing channel: $CHANNEL_ID"
          fi

          echo "CHANNEL_ID=$CHANNEL_ID" >> "$GITHUB_ENV"

      # 5) Create or update the DAG_FAILURE alert for the specified DAG
      - name: üö® Upsert DAG_FAILURE Alert
        run: |
          set -euxo pipefail
          echo "‚ñ∂ CHANNEL_ID = $CHANNEL_ID"

          # Fetch existing alerts scoped to this deployment
          ALL_ALERTS=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/${ASTRO_ORG_ID}/alerts?entityType=DEPLOYMENT&entityId=${ASTRO_DEPLOY_ID}&limit=100")

          # Check for an existing DAG_FAILURE alert
          ALERT_ID=$(echo "$ALL_ALERTS" | jq -r '
            .alerts[]
            | select(.type=="DAG_FAILURE" and .entityId=="'