# .github/workflows/alert-upsert.yml
# Custom Alert Workflow: upserts an Astro DAG_FAILURE alert targeting
# the true committer's email via a 4-step lookup (REST API ‚Üí push event ‚Üí GraphQL ‚Üí no-reply).
#
# Updates included:
# ‚Ä¢ Multi-step approach using GitHub‚Äôs REST API, push-event, GraphQL (via GH_EMAIL_TOKEN), then no-reply fallback for getting GitHub Committer's email address
# ‚Ä¢ Push a change to a dags/*.py file (to satisfy the CHANGED_FILES check).
# ‚Ä¢ Allow the GitHub Action to run and upsert the alert config against that deployment.
# ‚Ä¢ Then trigger a failure in that DAG run (manually or via schedule)‚ÄîAstro will record a failure event and your alert definition will appear (and fire) in the UI.

name: Rewire DAG failure alert to last committer

on:
  push:
    branches: [main]
  workflow_dispatch:

# ‚îÄ‚îÄ‚îÄ Global Env & Secrets ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
env:
  ASTRO_ORG_ID: ${{ vars.ASTRO_ORG_ID }}      # Your Astro Org ID
  ASTRO_DEPLOY_ID: ${{ vars.ASTRO_DEPLOY_ID }}# Your Astro Deployment ID
  ASTRO_API_TOKEN: ${{ secrets.ASTRO_API_TOKEN }}# Token with Platform API perms
  GH_EMAIL_TOKEN: ${{ secrets.GH_EMAIL_TOKEN }} # GitHub token for GraphQL fallback

jobs:
  upsert-alert:
    name: Upsert Astro DAG_FAILURE Alert
    runs-on: ubuntu-latest

    # Bring in the push-event email for quick lookup
    env:
      PUSHER_EMAIL: ${{ github.event.pusher.email }}

    steps:
      # 1Ô∏è‚É£ Checkout so we have full history for git diff/log
      - name: üöÄ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Determine the "true" committer email
      - name: üîç Determine committer email
        id: lookup-email
        run: |
          set -euxo pipefail
          # 2a) Try commit‚Äôs author.email via REST API
          COMMIT_EMAIL=$(gh api /repos/${GITHUB_REPOSITORY}/commits/${GITHUB_SHA} -q .commit.author.email || echo "")
          if [[ -n "$COMMIT_EMAIL" && "$COMMIT_EMAIL" != "null" ]]; then
            echo "‚ñ∂ Using commit-author email: $COMMIT_EMAIL"
            AUTHOR_EMAIL="$COMMIT_EMAIL"
          else
            # 2b) Next, try the push-event pusher.email
            if [[ -n "$PUSHER_EMAIL" && "$PUSHER_EMAIL" != "null" ]]; then
              echo "‚ñ∂ Using push-event pusher.email: $PUSHER_EMAIL"
              AUTHOR_EMAIL="$PUSHER_EMAIL"
            else
              # 2c) Fallback: public profile via GraphQL
              USER_EMAIL=$(curl -s -X POST \
                -H "Authorization: Bearer $GH_EMAIL_TOKEN" \
                -H "Content-Type: application/json" \
                -d '{"query":"query { viewer { email } }"}' \
                https://api.github.com/graphql \
                | jq -r .data.viewer.email || echo "")
              if [[ -n "$USER_EMAIL" && "$USER_EMAIL" != "null" ]]; then
                echo "‚ñ∂ Using GraphQL viewer.email: $USER_EMAIL"
                AUTHOR_EMAIL="$USER_EMAIL"
              else
                # 2d) Final fallback: GitHub no-reply
                AUTHOR_EMAIL="${GITHUB_ACTOR}@users.noreply.github.com"
                echo "‚ñ∂ Falling back to no-reply: $AUTHOR_EMAIL"
              fi
            fi
          fi
          # Export for downstream steps
          echo "AUTHOR_EMAIL=$AUTHOR_EMAIL" >> "$GITHUB_ENV"

      # 3Ô∏è‚É£ Create or reuse exactly one Notification Channel for this email
      - name: üîî Upsert Notification Channel
        id: upsert-channel
        run: |
          set -euo pipefail
          echo "ORG_ID       = $ASTRO_ORG_ID"
          echo "DEPLOY_ID    = $ASTRO_DEPLOY_ID"
          echo "AUTHOR_EMAIL = $AUTHOR_EMAIL"

          # Fetch channels scoped to this deployment
          CHANNEL_ID=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/notification-channels?entityType=DEPLOYMENT&entityId=$ASTRO_DEPLOY_ID&limit=100" \
          | jq -r --arg email "$AUTHOR_EMAIL" '
            .notificationChannels[]
            | select(.definition.recipients[] == $email)
            | .id
          ' | head -n1)

          if [[ -z "$CHANNEL_ID" ]]; then
            echo "‚ñ∂ Creating new email channel for $AUTHOR_EMAIL"
            CHANNEL_ID=$(curl -s -X POST \
              -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                    "name":           "dag-failure-'"${AUTHOR_EMAIL}"'",
                    "type":           "EMAIL",
                    "entityType":     "DEPLOYMENT",
                    "entityId":       "'"${ASTRO_DEPLOY_ID}"'",
                    "definition":     { "recipients": ["'"${AUTHOR_EMAIL}"'"] }
                  }' \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/notification-channels" \
            | jq -r .id)
            echo "‚ñ∂ Created channel: $CHANNEL_ID"
          else
            echo "‚ñ∂ Reusing existing channel: $CHANNEL_ID"
          fi

          echo "CHANNEL_ID=$CHANNEL_ID" >> "$GITHUB_ENV"

      # Optional: Dump all environment variables for debugging
      - name: üêû Dump all env
        run: env

      # Optional: Dump channels after upsert for debugging
      - name: üêõ Dump channels after upsert
        run: |
          curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/notification-channels?entityType=DEPLOYMENT&entityId=$ASTRO_DEPLOY_ID" \
          | jq '.notificationChannels[] | {id, recipients: .definition.recipients}'

      # 4Ô∏è‚É£ Create or update the DAG_FAILURE Alert
      - name: üö® Upsert DAG_FAILURE Alert
        run: |
          set -euo pipefail
          echo "‚ñ∂ CHANNEL_ID = $CHANNEL_ID"

          # get changed files (push a change to a dags/*.py file to satisfy this check)
          CHANGED_FILES=$(git diff --name-only "$GITHUB_SHA"^ "$GITHUB_SHA" | grep -E '^dags/.*\.py$' || true)
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "‚ö†Ô∏è No DAGs changed in this commit. Exiting early."
            exit 0
          fi
          echo "CHANGED_FILES = $CHANGED_FILES"

          # Parse DAG IDs from those files
          DAG_IDS=""
          # find the DAG Ids via multiple matchers
          for file in $CHANGED_FILES; do
            echo "Checking $file"
            ids1=$(grep -oP 'DAG\s*\(\s*["'"'']([^"'"'']+)["'"'']' "$file" | sed -E 's/.*["'"'']([^"'"'']+)["'"''].*/\1/' || true)
            ids2=$(grep -oP '@dag\s*\([^)]*dag_id\s*=\s*["'"'']([^"'"'']+)["'"'']' "$file" | sed -E 's/.*dag_id\s*=\s*["'"'']([^"'"'']+)["'"''].*/\1/' || true)
            ids3=$(awk '
              /@dag\s*\(/ {found=1; next}
              found && /^def / {
                if (match($0, /^def ([a-zA-Z_][a-zA-Z0-9_]*)\(/, arr)) {
                  print arr[1]
                  found=0
                }
              }
            ' "$file" || true)
            DAG_IDS="$DAG_IDS"$'\n'"$ids1"$'\n'"$ids2"$'\n'"$ids3
          done
          # Clean up and dedupe
          DAG_IDS=$(echo "$DAG_IDS" | grep -v '^\s*$' | sort -u)
          if [[ -z "$DAG_IDS" ]]; then
            echo "‚ö†Ô∏è No DAG IDs found in changed files. Exiting."[0;J
            exit 0
          fi
          echo "Found DAGs:"
          echo "$DAG_IDS"

          # Loop through each DAG ID and upsert alert
          for dag_id in $DAG_IDS; do
            echo "-- Processing alert for DAG: $dag_id --"
            # Fetch existing alert ID for this DAG
            ALL_ALERTS=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/alerts?entityType=DEPLOYMENT&entityId=$ASTRO_DEPLOY_ID&limit=100")
            ALERT_ID=$(echo "$ALL_ALERTS" | jq -r --arg dagid "$dag_id" '
              .alerts[]
              | select(.type=="DAG_FAILURE" and .entityId=="'"$ASTRO_DEPLOY_ID"'") and .rules.patternMatches[].values[] == $dagid)
              | .id // empty
            ')
            # Construct payload
            PAYLOAD=$(jq -n \
              --arg entType "DEPLOYMENT" \
              --arg entId  "$ASTRO_DEPLOY_ID" \
              --arg name   "auto-committer-dag-failure-$dag_id" \
              --arg dtype  "DAG_FAILURE" \
              --arg sev    "CRITICAL" \
              --arg chId   "$CHANNEL_ID" \
              --arg dagid  "$dag_id" \
              '{
                entityType:            $entType,
                entityId:              $entId,
                name:                  $name,
                type:                  $dtype,
                severity:              $sev,
                notificationChannelIds:[ $chId ],
                rules: {
                  properties: { deploymentId: $entId },
                  patternMatches: [
                    {
                      entityType:   "DAG_ID",
                      operatorType: "IS",
                      values:       [ $dagid ]
                    }
                  ]
                }
              }')
            if [[ -z "$ALERT_ID" ]]; then
              echo "‚ñ∂ Creating new DAG_FAILURE alert for $dag_id"
              echo "Painld
}]}