# .github/workflows/alert-upsert.yml
name: Rewire DAG failure alert to last committer

# ‚îÄ‚îÄ‚îÄ Triggers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
on:
  push:
    branches: [main]
  workflow_dispatch:

# ‚îÄ‚îÄ‚îÄ Env & Secrets (set these under Settings ‚Üí Secrets)‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
env:
  ASTRO_ORG_ID:    ${{ secrets.ASTRO_ORG_ID }}
  ASTRO_DEPLOY_ID: ${{ secrets.ASTRO_DEPLOY_ID }}
  ASTRO_API_TOKEN: ${{ secrets.ASTRO_API_TOKEN }}
  GH_EMAIL_TOKEN:  ${{ secrets.GH_EMAIL_TOKEN }}
  GH_TOKEN:        ${{ secrets.GITHUB_TOKEN }}

jobs:
  upsert-alert:
    name: Upsert Astro DAG_FAILURE Alert
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Check out the repo so we have GITHUB_SHA & GITHUB_REPOSITORY
      - name: üöÄ Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Figure out the real committer email
      - name: üîç Determine committer email
        id: lookup-email
        run: |
          set -euxo pipefail
          echo "‚ñ∂ GITHUB_ACTOR = $GITHUB_ACTOR"

          # Fast path: public commit author email
          COMMIT_EMAIL=$(gh api /repos/${GITHUB_REPOSITORY}/commits/${GITHUB_SHA} \
            -q .commit.author.email || echo "")
          if [[ -n "$COMMIT_EMAIL" && "$COMMIT_EMAIL" != "null" ]]; then
            echo "‚ñ∂ Using commit-author email: $COMMIT_EMAIL"
            echo "AUTHOR_EMAIL=$COMMIT_EMAIL" >>"$GITHUB_ENV"
            exit 0
          fi

          # Fallback: GraphQL lookup of your primary email
          REAL_EMAIL=$(curl -s -X POST \
            -H "Authorization: Bearer $GH_EMAIL_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"query":"query { viewer { email } }"}' \
            https://api.github.com/graphql \
            | jq -r .data.viewer.email)
          if [[ -n "$REAL_EMAIL" && "$REAL_EMAIL" != "null" ]]; then
            echo "‚ñ∂ Fetched GitHub-profile email: $REAL_EMAIL"
            echo "AUTHOR_EMAIL=$REAL_EMAIL" >>"$GITHUB_ENV"
            exit 0
          fi

          # Last-ditch: GitHub noreply
          FALLBACK="${GITHUB_ACTOR}@users.noreply.github.com"
          echo "‚ñ∂ Falling back to: $FALLBACK"
          echo "AUTHOR_EMAIL=$FALLBACK" >>"$GITHUB_ENV"

      # 3Ô∏è‚É£ Create or reuse the Astro notification channel
      - name: üîî Upsert Notification Channel
        id: upsert-channel
        run: |
          set -euxo pipefail
          echo "‚ñ∂ ORG_ID    = $ASTRO_ORG_ID"
          echo "‚ñ∂ DEPLOY_ID = $ASTRO_DEPLOY_ID"
          echo "‚ñ∂ AUTHOR_EMAIL = $AUTHOR_EMAIL"

          # Fetch channels scoped to this deployment
          ALL_CH=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/notification-channels?entityType=DEPLOYMENT&entityId=$ASTRO_DEPLOY_ID&limit=100")

          # Pick first existing channel for that email (head -n1 strips extra lines)
          CHANNEL_ID=$(echo "$ALL_CH" | jq -r --arg email "$AUTHOR_EMAIL" '
            .notificationChannels[]
            | select(.definition.recipients[]? == $email)
            | .id
          ' | head -n1)

          if [[ -z "$CHANNEL_ID" ]]; then
            echo "‚ñ∂ Creating new email channel for $AUTHOR_EMAIL"
            CREATE_RESP=$(curl -s -X POST \
              -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                    "name":"dag-failure-'${AUTHOR_EMAIL}'",
                    "type":"EMAIL",
                    "entityType":"DEPLOYMENT",
                    "entityId":"'"${ASTRO_DEPLOY_ID}"'",
                    "definition":{ "recipients":["'"${AUTHOR_EMAIL}"'"] }
                  }' \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/notification-channels")
            CHANNEL_ID=$(echo "$CREATE_RESP" | jq -r .id)
          else
            echo "‚ñ∂ Reusing existing channel: $CHANNEL_ID"
          fi

          echo "CHANNEL_ID=$CHANNEL_ID" >>"$GITHUB_ENV"

      # 4Ô∏è‚É£ Create or update your DAG_FAILURE alert
      - name: üö® Upsert DAG_FAILURE Alert
        run: |
          set -euxo pipefail
          echo "‚ñ∂ CHANNEL_ID = $CHANNEL_ID"

          dag_id="fail_demo_dag"  # ‚Üê replace with your real DAG ID

          # Fetch any existing alerts for this deployment
          ALL_ALERTS=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/alerts?entityType=DEPLOYMENT&entityId=$ASTRO_DEPLOY_ID&limit=100")

          # Look for an existing DAG_FAILURE alert
          ALERT_ID=$(echo "$ALL_ALERTS" | jq -r '
            .alerts[]
            | select(.type=="DAG_FAILURE" and .entityId=="'"$ASTRO_DEPLOY_ID"'")
            | .id // empty
          ')

          # Build the clean JSON payload via heredoc
          read -r -d '' PAYLOAD <<EOF
{
  "entityType":"DEPLOYMENT",
  "entityId":"$ASTRO_DEPLOY_ID",
  "name":"auto-committer-dag-failure",
  "type":"DAG_FAILURE",
  "severity":"CRITICAL",
  "notificationChannelIds":["$CHANNEL_ID"],
  "rules":{
    "properties":{
      "deploymentId":"$ASTRO_DEPLOY_ID"
    },
    "patternMatches":[
      {
        "entityType":"DAG_ID",
        "operatorType":"IS",
        "values":["$dag_id"]
      }
    ]
  }
}
EOF

          # Create or patch the alert
          if [[ -z "$ALERT_ID" ]]; then
            echo "‚ñ∂ Creating new DAG_FAILURE alert"
            curl -s -X POST \
              -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/alerts" \
            | jq .
          else
            echo "‚ñ∂ Updating existing alert: $ALERT_ID"
            curl -s -X PATCH \
              -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ASTRO_ORG_ID/alerts/$ALERT_ID" \
            | jq .
          fi