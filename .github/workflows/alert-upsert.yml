name: Rewire DAG failure alert to last committer
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  ORG_ID: ${{ secrets.ASTRO_ORG_ID }}
  DEPLOY_ID: ${{ secrets.ASTRO_DEPLOY_ID }}
  ASTRO_API_TOKEN: ${{ secrets.ASTRO_API_TOKEN }}

jobs:
  alert:
    runs-on: ubuntu-latest
    # ← Add GH_TOKEN here so `gh api` picks it up automatically
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - id: meta
        name: Capture committer email
        run: |
          set -euxo pipefail
          echo "▶ GITHUB_ACTOR = $GITHUB_ACTOR"
          # Always pull the author email from GitHub’s commit API
          AUTHOR_EMAIL=$(gh api \
            /repos/${GITHUB_REPOSITORY}/commits/${GITHUB_SHA} \
            -q .commit.author.email)
          echo "▶ Resolved AUTHOR_EMAIL = $AUTHOR_EMAIL"
          echo "AUTHOR_EMAIL=$AUTHOR_EMAIL" >> "$GITHUB_ENV"

      - name: Upsert channel
        run: |
          set -euxo pipefail
          echo "▶ ORG_ID        = $ORG_ID"
          echo "▶ DEPLOY_ID     = $DEPLOY_ID"
          echo "▶ AUTHOR_EMAIL  = $AUTHOR_EMAIL"

          ALL_CH=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/$ORG_ID/notification-channels?limit=100")
          echo "$ALL_CH" | jq .

          CID=$(echo "$ALL_CH" | jq -r --arg dep "$DEPLOY_ID" --arg email "$AUTHOR_EMAIL" '
            .notificationChannels[]
            | select(.entityId==$dep and (.definition.recipients[]?==$email))
            | .id // empty'
          )

          if [ -z "$CID" ]; then
            CREATE_RESP=$(curl -s -X POST -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                    "name": "demo-'${AUTHOR_EMAIL}'",
                    "type": "EMAIL",
                    "entityType": "DEPLOYMENT",
                    "entityId": "'${DEPLOY_ID}'",
                    "definition": { "recipients": ["'${AUTHOR_EMAIL}'"] }
                  }' \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ORG_ID/notification-channels")
            echo "$CREATE_RESP" | jq .
            CID=$(echo "$CREATE_RESP" | jq -r '.id')
          fi

          echo "CHAN_ID=$CID" >> "$GITHUB_ENV"

      - name: Upsert alert
        run: |
          set -euxo pipefail
          ALL_ALERTS=$(curl -s -H "Authorization: Bearer $ASTRO_API_TOKEN" \
            "https://api.astronomer.io/platform/v1beta1/organizations/$ORG_ID/alerts?limit=100")
          echo "$ALL_ALERTS" | jq .

          ALERT_ID=$(echo "$ALL_ALERTS" | jq -r --arg dep "$DEPLOY_ID" '
            .alerts[]
            | select(.name=="auto-committer-failure" and ((.entityId//.deploymentId)==$dep))
            | .id // empty'
          )

          ALERT_PAYLOAD='{
            "entityId":"'"${DEPLOY_ID}"'",
            "entityType":"DEPLOYMENT",
            "name":"auto-committer-failure",
            "type":"DAG_FAILURE",
            "severity":"CRITICAL",
            "notificationChannelIds":["'"${CID}"'"],
            "rules":{"properties":{"deploymentId":"'"${DEPLOY_ID}"'"}}
          }'
          echo "$ALERT_PAYLOAD" | jq .

          if [ -z "$ALERT_ID" ]; then
            curl -s -X POST -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$ALERT_PAYLOAD" \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ORG_ID/alerts" \
            | jq .
          else
            curl -s -X PATCH -H "Authorization: Bearer $ASTRO_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$ALERT_PAYLOAD" \
              "https://api.astronomer.io/platform/v1beta1/organizations/$ORG_ID/alerts/$ALERT_ID" \
            | jq .
          fi